{
  "_args": [
    [
      {
        "raw": "@babel/core@^7.0.0-beta",
        "scope": "@babel",
        "escapedName": "@babel%2fcore",
        "name": "@babel/core",
        "rawSpec": "^7.0.0-beta",
        "spec": ">=7.0.0-beta <8.0.0",
        "type": "range"
      },
      "/home/yugam/Desktop/Workspace/Alma-Mater/node_modules/metro"
    ]
  ],
  "_from": "@babel/core@>=7.0.0-beta <8.0.0",
  "_id": "@babel/core@7.0.0-beta.42",
  "_inCache": true,
  "_location": "/@babel/core",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/core_7.0.0-beta.42_1521147132570_0.18710295227053764"
  },
  "_npmUser": {
    "name": "hzoo",
    "email": "hi@henryzoo.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "ms": "2.0.0"
  },
  "_requested": {
    "raw": "@babel/core@^7.0.0-beta",
    "scope": "@babel",
    "escapedName": "@babel%2fcore",
    "name": "@babel/core",
    "rawSpec": "^7.0.0-beta",
    "spec": ">=7.0.0-beta <8.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/metro"
  ],
  "_resolved": "https://registry.npmjs.org/@babel/core/-/core-7.0.0-beta.42.tgz",
  "_shasum": "b3a838fddbd19663369a0b4892189fd8d3f82001",
  "_shrinkwrap": null,
  "_spec": "@babel/core@^7.0.0-beta",
  "_where": "/home/yugam/Desktop/Workspace/Alma-Mater/node_modules/metro",
  "author": {
    "name": "Sebastian McKenzie",
    "email": "sebmck@gmail.com"
  },
  "browser": {
    "./lib/config/files/index.js": "./lib/config/files/index-browser.js",
    "./lib/transform-file.js": "./lib/transform-file-browser.js",
    "./lib/transform-file-sync.js": "./lib/transform-file-sync-browser.js"
  },
  "dependencies": {
    "@babel/code-frame": "7.0.0-beta.42",
    "@babel/generator": "7.0.0-beta.42",
    "@babel/helpers": "7.0.0-beta.42",
    "@babel/template": "7.0.0-beta.42",
    "@babel/traverse": "7.0.0-beta.42",
    "@babel/types": "7.0.0-beta.42",
    "babylon": "7.0.0-beta.42",
    "convert-source-map": "^1.1.0",
    "debug": "^3.1.0",
    "json5": "^0.5.0",
    "lodash": "^4.2.0",
    "micromatch": "^2.3.11",
    "resolve": "^1.3.2",
    "semver": "^5.4.1",
    "source-map": "^0.5.0"
  },
  "description": "Babel compiler core.",
  "devDependencies": {
    "@babel/helper-transform-fixture-test-runner": "7.0.0-beta.42",
    "@babel/register": "7.0.0-beta.42"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-jcjZRewF/xqROfbk8EGyWlykaIR3IwrcefjWHu8xh4QnULSv3nfkjPM35v1itDgAT4/Jj5b4mPf4eZSC2HoRQA==",
    "shasum": "b3a838fddbd19663369a0b4892189fd8d3f82001",
    "tarball": "https://registry.npmjs.org/@babel/core/-/core-7.0.0-beta.42.tgz",
    "fileCount": 40,
    "unpackedSize": 129340
  },
  "homepage": "https://babeljs.io/",
  "keywords": [
    "6to5",
    "babel",
    "classes",
    "const",
    "es6",
    "harmony",
    "let",
    "modules",
    "transpile",
    "transpiler",
    "var",
    "babel-core",
    "compiler"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "andarist",
      "email": "mateuszburzynski@gmail.com"
    },
    {
      "name": "danez",
      "email": "daniel@tschinder.de"
    },
    {
      "name": "existentialism",
      "email": "bng412@gmail.com"
    },
    {
      "name": "hzoo",
      "email": "hi@henryzoo.com"
    },
    {
      "name": "loganfsmyth",
      "email": "loganfsmyth@gmail.com"
    },
    {
      "name": "xtuc",
      "email": "contact@xtuc.fr"
    }
  ],
  "name": "@babel/core",
  "optionalDependencies": {},
  "readme": "# @babel/core\n\n> Babel compiler core.\n\n\n```javascript\nvar babel = require(\"@babel/core\");\nimport { transform } from \"@babel/core\";\nimport * as babel from \"@babel/core\";\n```\n\nAll transformations will use your local configuration files (`.babelrc` or in `package.json`). See [options](#options) to disable it.\n\n\n## babel.transform(code: string, [options?](#options): Object, callback: Function)\n\nTransforms the passed in `code`. Calling a callback with an object with the generated code,\nsource map, and AST.\n\n```js\nbabel.transform(code, options, function(err, result) {\n  result; // => { code, map, ast }\n});\n```\n\n**Example**\n\n```js\nbabel.transform(\"code();\", options, function(err, result) {\n  result.code;\n  result.map;\n  result.ast;\n});\n```\n\n### Compat Note:\n\nIn Babel 6, this method was synchronous and `transformSync` did not exist. For backward-compatibility,\nthis function will behave synchronously if no callback is given. If you're starting with Babel 7\nand need synchronous behavior, please use `transformSync` since this backward-compat may be dropped in\nfuture major versions of Babel.\n\n\n## babel.transformSync(code: string, [options?](#options): Object)\n\nTransforms the passed in `code`. Returning an object with the generated code,\nsource map, and AST.\n\n```js\nbabel.transformSync(code, options) // => { code, map, ast }\n```\n\n**Example**\n\n```js\nvar result = babel.transformSync(\"code();\", options);\nresult.code;\nresult.map;\nresult.ast;\n```\n\n\n## babel.transformFile(filename: string, [options?](#options): Object, callback: Function)\n\nAsynchronously transforms the entire contents of a file.\n\n```js\nbabel.transformFile(filename, options, callback)\n```\n\n**Example**\n\n```js\nbabel.transformFile(\"filename.js\", options, function (err, result) {\n  result; // => { code, map, ast }\n});\n```\n\n\n## babel.transformFileSync(filename: string, [options?](#options): Object)\n\nSynchronous version of `babel.transformFile`. Returns the transformed contents of\nthe `filename`.\n\n```js\nbabel.transformFileSync(filename, options) // => { code, map, ast }\n```\n\n**Example**\n\n```js\nbabel.transformFileSync(\"filename.js\", options).code;\n```\n\n\n## babel.transformFromAst(ast: Object, code?: string, [options?](#options): Object, callback: Function): FileNode | null\n\nGiven an [AST](https://astexplorer.net/), transform it.\n\n```js\nconst sourceCode = \"if (true) return;\";\nconst parsedAst = babylon.parse(sourceCode, { allowReturnOutsideFunction: true });\nbabel.transformFromAst(parsedAst, sourceCode, options, function(err, result) {\n  const { code, map, ast } = result;\n});\n```\n\n### Compat Note:\n\nIn Babel 6, this method was synchronous and `transformFromAstSync` did not exist. For backward-compatibility,\nthis function will behave synchronously if no callback is given. If you're starting with Babel 7\nand need synchronous behavior, please use `transformFromAstSync` since this backward-compat may be dropped in\nfuture major versions of Babel.\n\n\n## babel.transformFromAstSync(ast: Object, code?: string, [options?](#options): Object)\n\nGiven an [AST](https://astexplorer.net/), transform it.\n\n```js\nconst sourceCode = \"if (true) return;\";\nconst parsedAst = babylon.parse(sourceCode, { allowReturnOutsideFunction: true });\nconst { code, map, ast } = babel.transformFromAstSync(parsedAst, sourceCode, options);\n```\n\n## babel.parse(code: string, [options?](#options): Object)\n\nGiven some code, parse it using Babel's standard behavior. Referenced presets and\nplugins will be loaded such that optional syntax plugins are automatically\nenabled.\n\n\n## Advanced APIs\n\nMany systems that wrap Babel like to automatically inject plugins and presets,\nor override options. To accomplish this goal, Babel exposes several functions\nthat aid in loading the configuration part-way without transforming.\n\n### babel.loadOptions([options?](#options): Object)\n\nResolve Babel's options fully, resulting in an options object where:\n\n* `opts.plugins` is a full list of `Plugin` instances.\n* `opts.presets` is empty and all presets are flattened into `opts`.\n* It can be safely passed back to Babel. Fields like `babelrc` have been set to \n  false so that later calls to Babel will not make a second attempt to load\n  config files.\n\n`Plugin` instances aren't meant to be manipulated directly, but often\ncallers will serialize this `opts` to JSON to use it as a cache key representing\nthe options Babel has received. Caching on this isn't 100% guaranteed to\ninvalidate properly, but it is the best we have at the moment.\n\n\n### babel.loadPartialConfig([options?](#options): Object): PartialConfig\n\nTo allow systems to easily manipulate and validate a user's config, this function\nresolves the plugins and presets and proceeds no further. The expectation is\nthat callers will take the config's `.options`, manipulate it as then see fit\nand pass it back to Babel again.\n\n* `babelrc: string | void` - The path of the `.babelrc` file, if there was one.\n* `babelignore: string | void` - The path of the `.babelignore` file, if there was one.\n* `options: ValidatedOptions` - The partially resolved options, which can be manipulated and passed back to Babel again.\n  * `plugins: Array<ConfigItem>` - See below.\n  * `presets: Array<ConfigItem>` - See below.\n  * It can be safely passed back to Babel. Fields like `babelrc` have been set\n    to false so that later calls to Babel will not make a second attempt to \n    load config files.\n* `hasFilesystemConfig(): boolean` - Check if the resolved config loaded any settings from the filesystem.\n\n[`ConfigItem`](#configitem-type) instances expose properties to introspect the values, but each\nitem should be treated as immutable. If changes are desired, the item should be\nremoved from the list and replaced with either a normal Babel config value, or\nwith a replacement item created by `babel.createConfigItem`. See that\nfunction for information about `ConfigItem` fields.\n\n\n### babel.createConfigItem(value: string | {} | Function | [string | {} | Function, {} | void], { dirname?: string, type?: \"preset\" | \"plugin\" }): ConfigItem\n\nAllows build tooling to create and cache config items up front. If this function\nis called multiple times for a given plugin, Babel will call the plugin's function itself\nmultiple times. If you have a clear set of expected plugins and presets to\ninject, pre-constructing the config items would be recommended.\n\n\n### `ConfigItem` type\n\nEach `ConfigItem` exposes all of the information Babel knows. The fields are:\n\n* `value: {} | Function` - The resolved value of the plugin.\n* `options: {} | void` - The options object passed to the plugin.\n* `dirname: string` - The path that the options are relative to.\n* `name: string | void` - The name that the user gave the plugin instance, e.g. `plugins: [ ['env', {}, 'my-env'] ]` \n* `file: Object | void` - Information about the plugin's file, if Babel knows it.\n  * `request: string` - The file that the user requested, e.g. `\"@babel/env\"`\n  * `resolved: string` - The full path of the resolved file, e.g. `\"/tmp/node_modules/@babel/preset-env/lib/index.js\"`\n\n\n## Options\n\n<blockquote class=\"babel-callout babel-callout-info\">\n  <h4>Babel CLI</h4>\n  <p>\n    You can pass these options from the Babel CLI like so:\n  </p>\n  <p>\n    <code>babel --name<span class=\"o\">=</span>value</code>\n  </p>\n</blockquote>\n\nFollowing is a table of the options you can use:\n\n| Option                   | Default              | Description                     |\n| ------------------------ | -------------------- | ------------------------------- |\n| `ast`                    | `true`               | Include the AST in the returned object |\n| `auxiliaryCommentAfter`  | `null`               | Attach a comment after all non-user injected code |\n| `auxiliaryCommentBefore` | `null`               | Attach a comment before all non-user injected code |\n| `babelrc`                | `true`               | Specify whether or not to use .babelrc and .babelignore files. Not available when using the CLI, [use `--no-babelrc` instead](https://babeljs.io/docs/usage/cli/#babel-ignoring-babelrc) |\n| `envName`                | env vars             | Defaults to environment variable `BABEL_ENV` if set, or else `NODE_ENV` if set, or else it defaults to `\"development\"` |\n| `code`                   | `true`               | Enable code generation |\n| `comments`               | `true`               | Output comments in generated output |\n| `compact`                | `\"auto\"`             | Do not include superfluous whitespace characters and line terminators. When set to `\"auto\"` compact is set to `true` on input sizes of >500KB |\n| `env`                    | `{}`                 | This is an object of keys that represent different environments. For example, you may have: `{ env: { production: { /* specific options */ } } }` which will use those options when the `envName` is `production` |\n| `extends`                | `null`               | A path to a `.babelrc` file to extend |\n| `filename`               | `\"unknown\"`          | Filename for use in errors etc |\n| `filenameRelative`       | `(filename)`         | Filename relative to `sourceRoot` |\n| `generatorOpts`          | `{}`                 | An object containing the options to be passed down to the babel code generator, @babel/generator |\n| `getModuleId`            | `null`               | Specify a custom callback to generate a module id with. Called as `getModuleId(moduleName)`. If falsy value is returned then the generated module id is used |\n| `highlightCode`          | `true`               | ANSI highlight syntax error code frames |\n| `ignore`                 | `null`               | Opposite to the `only` option. `ignore` is disregarded if `only` is specified |\n| `inputSourceMap`         | `null`               | A source map object that the output source map will be based on |\n| `minified`               | `false`              | Should the output be minified (not printing last semicolons in blocks, printing literal string values instead of escaped ones, stripping `()` from `new` when safe) |\n| `moduleId`               | `null`               | Specify a custom name for module ids |\n| `moduleIds`              | `false`              | If truthy, insert an explicit id for modules. By default, all modules are anonymous. (Not available for `common` modules) |\n| `moduleRoot`             | `(sourceRoot)`       | Optional prefix for the AMD module formatter that will be prepend to the filename on module definitions |\n| `only`                   | `null`               | A [glob](https://github.com/isaacs/minimatch), regex, or mixed array of both, matching paths to **only** compile. Can also be an array of arrays containing paths to explicitly match. When attempting to compile a non-matching file it's returned verbatim |\n| `parserOpts`             | `{}`                 | An object containing the options to be passed down to the babel parser, babylon |\n| `plugins`                | `[]`                 | List of [plugins](https://babeljs.io/docs/plugins/) to load and use |\n| `presets`                | `[]`                 | List of [presets](https://babeljs.io/docs/plugins/#presets) (a set of plugins) to load and use |\n| `retainLines`            | `false`              | Retain line numbers. This will lead to wacky code but is handy for scenarios where you can't use source maps. (**NOTE:** This will not retain the columns) |\n| `shouldPrintComment`     | `null`               | An optional callback that controls whether a comment should be output or not. Called as `shouldPrintComment(commentContents)`. **NOTE:** This overrides the `comment` option when used |\n| `sourceFileName`         | `(filenameRelative)` | Set `sources[0]` on returned source map |\n| `sourceMaps`             | `false`              | If truthy, adds a `map` property to returned output. If set to `\"inline\"`, a comment with a sourceMappingURL directive is added to the bottom of the returned code. If set to `\"both\"` then a `map` property is returned as well as a source map comment appended. **This does not emit sourcemap files by itself!** To have sourcemaps emitted using the CLI, you must pass it the `--source-maps` option |\n| `sourceRoot`             | `(moduleRoot)`       | The root from which all sources are relative |\n| `sourceType`             | `\"module\"`           | Indicate the mode the code should be parsed in. Can be one of \"script\", \"module\", or \"unambiguous\". `\"unambiguous\"` will make Babel attempt to _guess_, based on the presence of ES6 `import` or `export` statements. Files with ES6 `import`s and `export`s are considered `\"module\"` and are otherwise `\"script\"`. |\n| `wrapPluginVisitorMethod`| `null`               | An optional callback that can be used to wrap visitor methods. **NOTE:** This is useful for things like introspection, and not really needed for implementing anything. Called as `wrapPluginVisitorMethod(pluginAlias, visitorType, callback)`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/babel/tree/master/packages/babel-core"
  },
  "version": "7.0.0-beta.42"
}
