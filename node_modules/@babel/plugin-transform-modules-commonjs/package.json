{
  "_args": [
    [
      {
        "raw": "@babel/plugin-transform-modules-commonjs@^7.0.0-beta",
        "scope": "@babel",
        "escapedName": "@babel%2fplugin-transform-modules-commonjs",
        "name": "@babel/plugin-transform-modules-commonjs",
        "rawSpec": "^7.0.0-beta",
        "spec": ">=7.0.0-beta <8.0.0",
        "type": "range"
      },
      "/home/yugam/Desktop/Workspace/Alma-Mater/node_modules/metro"
    ]
  ],
  "_from": "@babel/plugin-transform-modules-commonjs@>=7.0.0-beta <8.0.0",
  "_id": "@babel/plugin-transform-modules-commonjs@7.0.0-beta.42",
  "_inCache": true,
  "_location": "/@babel/plugin-transform-modules-commonjs",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/plugin-transform-modules-commonjs_7.0.0-beta.42_1521147128432_0.45281893460916334"
  },
  "_npmUser": {
    "name": "hzoo",
    "email": "hi@henryzoo.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@babel/plugin-transform-modules-commonjs@^7.0.0-beta",
    "scope": "@babel",
    "escapedName": "@babel%2fplugin-transform-modules-commonjs",
    "name": "@babel/plugin-transform-modules-commonjs",
    "rawSpec": "^7.0.0-beta",
    "spec": ">=7.0.0-beta <8.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/metro"
  ],
  "_resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.0.0-beta.42.tgz",
  "_shasum": "bdfb30e194c8841ec3ddd8a011974102d0d74afc",
  "_shrinkwrap": null,
  "_spec": "@babel/plugin-transform-modules-commonjs@^7.0.0-beta",
  "_where": "/home/yugam/Desktop/Workspace/Alma-Mater/node_modules/metro",
  "dependencies": {
    "@babel/helper-module-transforms": "7.0.0-beta.42",
    "@babel/helper-plugin-utils": "7.0.0-beta.42",
    "@babel/helper-simple-access": "7.0.0-beta.42"
  },
  "description": "This plugin transforms ES2015 modules to CommonJS",
  "devDependencies": {
    "@babel/core": "7.0.0-beta.42",
    "@babel/helper-plugin-test-runner": "7.0.0-beta.42",
    "@babel/plugin-syntax-object-rest-spread": "7.0.0-beta.42"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-tCN0FFdTHaXpuJokvW8iWtbDpjKDNDO2dIyb8rr0GMQxsA62914e8oclcDUPEbC5iF5SCDEF0CmVHXbxnvANfQ==",
    "shasum": "bdfb30e194c8841ec3ddd8a011974102d0d74afc",
    "tarball": "https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.0.0-beta.42.tgz",
    "fileCount": 3,
    "unpackedSize": 12403
  },
  "keywords": [
    "babel-plugin"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "andarist",
      "email": "mateuszburzynski@gmail.com"
    },
    {
      "name": "danez",
      "email": "daniel@tschinder.de"
    },
    {
      "name": "existentialism",
      "email": "bng412@gmail.com"
    },
    {
      "name": "hzoo",
      "email": "hi@henryzoo.com"
    },
    {
      "name": "loganfsmyth",
      "email": "loganfsmyth@gmail.com"
    },
    {
      "name": "xtuc",
      "email": "contact@xtuc.fr"
    }
  ],
  "name": "@babel/plugin-transform-modules-commonjs",
  "optionalDependencies": {},
  "peerDependencies": {
    "@babel/core": "7.0.0-beta.42"
  },
  "readme": "# @babel/plugin-transform-modules-commonjs\n\n> This plugin transforms ES2015 modules to [CommonJS](http://wiki.commonjs.org/wiki/Modules/1.1).\n\n## Example\n\n**In**\n\n```javascript\nexport default 42;\n```\n\n**Out**\n\n```javascript\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = 42;\n```\n\n## Installation\n\n```sh\nnpm install --save-dev @babel/plugin-transform-modules-commonjs\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\n```js\n// without options\n{\n  \"plugins\": [\"@babel/plugin-transform-modules-commonjs\"]\n}\n\n// with options\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-modules-commonjs\", {\n      \"allowTopLevelThis\": true\n    }]\n  ]\n}\n```\n\n### Via CLI\n\n```sh\nbabel --plugins @babel/plugin-transform-modules-commonjs script.js\n```\n\n### Via Node API\n\n```javascript\nrequire(\"@babel/core\").transform(\"code\", {\n  plugins: [\"@babel/plugin-transform-modules-commonjs\"]\n});\n```\n\n## Options\n\n### `loose`\n\n`boolean`, defaults to `false`.\n\nBy default, when using exports with babel a non-enumerable `__esModule` property\nis exported.\n\n```javascript\nvar foo = exports.foo = 5;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n```\n\nIn environments that don't support this you can enable loose mode on `@babel/plugin-transform-modules-commonjs`\nand instead of using `Object.defineProperty` an assignment will be used instead.\n\n```javascript\nvar foo = exports.foo = 5;\nexports.__esModule = true;\n```\n\n### `strict`\n\n`boolean`, defaults to `false`\n\nBy default, when using exports with babel a non-enumerable `__esModule` property\nis exported. In some cases this property is used to determine if the import _is_ the\ndefault export or if it _contains_ the default export.\n\n```javascript\nvar foo = exports.foo = 5;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n```\n\nIn order to prevent the `__esModule` property from being exported, you can set\nthe `strict` option to `true`.\n\n### `noInterop`\n\n`boolean`, defaults to `false`\n\nBy default, when using exports with babel a non-enumerable `__esModule` property\nis exported. This property is then used to determine if the import _is_ the default\nexport or if it _contains_ the default export.\n\n```javascript\n\"use strict\";\n\nvar _foo = _interopRequireDefault(require(\"foo\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n```\n\nIn cases where the auto-unwrapping of `default` is not needed, you can set the\n`noInterop` option to `true` to avoid the usage of the `interopRequireDefault`\nhelper (shown in inline form above).\n\n### `lazy`\n\n`boolean`, `Array<string>`, or `(string) => boolean`, defaults to `false`\n\nChanges Babel's compiled `import` statements to be lazily evaluated when their\nimported bindings are used for the first time.\n\nThis can improve initial load time of your module because evaluating\ndependencies up front is sometimes entirely un-necessary. This is especially\nthe case when implementing a library module.\n\nThe value of `lazy` has a few possible effects:\n\n* `false` - No lazy initialization of any imported module.\n* `true` - Do not lazy-initialize local `./foo` imports, but lazy-init `foo` dependencies.\n\n  Local paths are much more likely to have circular dependencies, which may break if loaded lazily,\n  so they are not lazy by default, whereas dependencies between independent modules are rarely cyclical.\n\n* `Array<string>` - Lazy-initialize all imports with source matching one of the given strings.\n* `(string) => boolean` - Pass a callback that will be called to decide if a given source string should be lazy-loaded.\n\nThe two cases where imports can never be lazy are:\n\n* `import \"foo\";`\n\n  Side-effect imports are automatically non-lazy since their very existence means\n  that there is no binding to later kick off initialization.\n\n* `export * from \"foo\"`\n\n  Re-exporting all names requires up-front execution because otherwise there is no\n  way to know what names need to be exported.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-modules-commonjs"
  },
  "version": "7.0.0-beta.42"
}
