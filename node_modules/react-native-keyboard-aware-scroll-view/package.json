{
  "_args": [
    [
      {
        "raw": "react-native-keyboard-aware-scroll-view@0.4.2",
        "scope": null,
        "escapedName": "react-native-keyboard-aware-scroll-view",
        "name": "react-native-keyboard-aware-scroll-view",
        "rawSpec": "0.4.2",
        "spec": "0.4.2",
        "type": "version"
      },
      "/home/yugam/Desktop/Workspace/Alma-Mater/node_modules/native-base"
    ]
  ],
  "_from": "react-native-keyboard-aware-scroll-view@0.4.2",
  "_id": "react-native-keyboard-aware-scroll-view@0.4.2",
  "_inCache": true,
  "_location": "/react-native-keyboard-aware-scroll-view",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-keyboard-aware-scroll-view-0.4.2.tgz_1516006475079_0.4729953412897885"
  },
  "_npmUser": {
    "name": "alvaromb",
    "email": "me@alvaromb.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-keyboard-aware-scroll-view@0.4.2",
    "scope": null,
    "escapedName": "react-native-keyboard-aware-scroll-view",
    "name": "react-native-keyboard-aware-scroll-view",
    "rawSpec": "0.4.2",
    "spec": "0.4.2",
    "type": "version"
  },
  "_requiredBy": [
    "/native-base"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-keyboard-aware-scroll-view/-/react-native-keyboard-aware-scroll-view-0.4.2.tgz",
  "_shasum": "f8777e5ab14ac8416d86376f15a99dd59e87522f",
  "_shrinkwrap": null,
  "_spec": "react-native-keyboard-aware-scroll-view@0.4.2",
  "_where": "/home/yugam/Desktop/Workspace/Alma-Mater/node_modules/native-base",
  "author": {
    "name": "Alvaro Medina Ballester",
    "email": "me@alvaromb.com"
  },
  "bugs": {
    "url": "https://github.com/APSL/react-native-keyboard-aware-scroll-view/issues"
  },
  "dependencies": {
    "prop-types": "^15.6.0",
    "react-native-iphone-x-helper": "^1.0.1"
  },
  "description": "A React Native ScrollView component that resizes when the keyboard appears.",
  "devDependencies": {
    "babel-eslint": "^8.0.1",
    "babel-preset-react-native": "^4.0.0",
    "eslint": "^4.7.2",
    "eslint-plugin-flowtype": "^2.36.0",
    "eslint-plugin-react": "^7.4.0",
    "eslint-plugin-react-native": "^3.1.0",
    "flow": "^0.2.3",
    "flow-bin": "0.47.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-lwjpEUFkahRI0javXKMuCDUARQxUHyZF0Yfy2ZXoBiDDmy3o9z6MdwWUCexl6CLiuagExxq10Iin1EkzpAKdSA==",
    "shasum": "f8777e5ab14ac8416d86376f15a99dd59e87522f",
    "tarball": "https://registry.npmjs.org/react-native-keyboard-aware-scroll-view/-/react-native-keyboard-aware-scroll-view-0.4.2.tgz"
  },
  "gitHead": "3e6f237531df0f084b24b233a77233e169f00ecb",
  "homepage": "https://github.com/APSL/react-native-keyboard-aware-scroll-view#readme",
  "keywords": [
    "react",
    "react-native",
    "scrollview",
    "keyboard",
    "ios",
    "android",
    "react-component"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "alvaromb",
      "email": "me@alvaromb.com"
    }
  ],
  "name": "react-native-keyboard-aware-scroll-view",
  "optionalDependencies": {},
  "peerDependencies": {
    "react-native": ">=0.48.4"
  },
  "readme": "# react-native-keyboard-aware-scroll-view\n\n<p>\n<img src=\"https://travis-ci.org/APSL/react-native-keyboard-aware-scroll-view.svg?branch=master\" />\n<img src=\"https://img.shields.io/npm/dm/react-native-keyboard-aware-scroll-view.svg\" />\n<img src=\"https://img.shields.io/npm/dt/react-native-keyboard-aware-scroll-view.svg\" />\n</p>\n\nA ScrollView component that handles keyboard appearance and automatically scrolls to focused `TextInput`.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/wiki/APSL/react-native-keyboard-aware-scroll-view/kasv.gif\" alt=\"Scroll demo\" width=\"400\">\n</p>\n\n## Supported versions\n- `v0.4.0` requires `RN>=0.48`\n- `v0.2.0` requires `RN>=0.32.0`.\n- `v0.1.2` requires `RN>=0.27.2` but you should use `0.2.0` in order to make it work with multiple scroll views.\n- `v0.0.7` requires `react-native>=0.25.0`.\n- Use `v0.0.6` for older RN versions.\n\n## Installation\nInstallation can be done through ``npm`` or `yarn`:\n\n```shell\nnpm i react-native-keyboard-aware-scroll-view --save\n```\n\n```shell\nyarn add react-native-keyboard-aware-scroll-view\n```\n\n## Usage\nYou can use the `KeyboardAwareScrollView`, the `KeyboardAwareListView` or the `KeyboardAwareFlatList`\ncomponents. They accept `ScrollView`, `ListView` and `FlatList` default props respectively and\nimplement a custom high order componente called `KeyboardAwareHOC` to handle keyboard appearance.\nThe high order component is also available if you want to use it in any other component.\n\nImport ``react-native-keyboard-aware-scroll-view`` and wrap your content inside\nit:\n\n```js\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'\n```\n\n```jsx\n<KeyboardAwareScrollView>\n  <View>\n    <TextInput />\n  </View>\n</KeyboardAwareScrollView>\n```\n\n## Auto-scroll in `TextInput` fields\nAs of `v0.1.0`, the component auto scrolls to the focused `TextInput` üòé. For versions `v0.0.7` and older you can do the following.\n\n### Programatically scroll to any `TextInput`\nIn order to scroll to any `TextInput` field, you can use the built-in method `scrollToFocusedInput`. Example:\n\n```js\n_scrollToInput (reactNode: any) {\n  // Add a 'scroll' ref to your ScrollView\n  this.scroll.scrollToFocusedInput(reactNode)\n}\n```\n\n```jsx\n<KeyboardAwareScrollView innerRef={ref => {this.scroll = ref}}>\n  <View>\n    <TextInput onFocus={(event: Event) => {\n      // `bind` the function if you're using ES6 classes\n      this._scrollToInput(ReactNative.findNodeHandle(event.target))\n    }} />\n  </View>\n</KeyboardAwareScrollView>\n```\n\n### Programatically scroll to any position\nThere's another built-in function that lets you programatically scroll to any position of the scroll view:\n\n```js\nthis.scroll.props.scrollToPosition(0, 0)\n```\n\n## Register to keyboard events\nYou can register to `ScrollViewResponder` events `onKeyboardWillShow` and `onKeyboardWillHide`:\n\n```jsx\n<KeyboardAwareScrollView\n  onKeyboardWillShow={(frames: Object) => {\n    console.log('Keyboard event', frames)\n  }}>\n  <View>\n    <TextInput />\n  </View>\n</KeyboardAwareScrollView>\n```\n\n## Android Support\nFirst, Android natively has this feature, you can easily enable it by setting `windowSoftInputMode` in `AndroidManifest.xml`. Check [here](https://developer.android.com/guide/topics/manifest/activity-element.html#wsoft).\n\nBut if you want to use feature like `extraHeight`, you need to enable Android Support with the following steps:\n\n- Make sure you are using react-native `0.46` or above.\n- Set `windowSoftInputMode` to `adjustPan` in `AndroidManifest.xml`.\n- Set `enableOnAndroid` property to `true`.\n\nAndroid Support is not perfect, here is the supported list:\n\n| **Prop** | **Android Support** |\n|----------|-----------------|\n| `viewIsInsideTabBar` | Yes |\n| `resetScrollToCoords` | Yes |\n| `enableAutoAutomaticScroll` | Yes |\n| `extraHeight` | Yes |\n| `extraScrollHeight` | Yes |\n| `enableResetScrollToCoords` | Yes |\n| `keyboardOpeningTime` | No |\n\n\n## API\n### Props\nAll the `ScrollView`/`ListView`/`FlatList` props will be passed.\n\n| **Prop** | **Type** | **Description** |\n|----------|----------|-----------------|\n| `innerRef` | `Function` | Catch the reference of the component. |\n| `viewIsInsideTabBar` | `boolean` | Adds an extra offset that represents the `TabBarIOS` height. |\n| `resetScrollToCoords` | `Object: {x: number, y: number}` | Coordinates that will be used to reset the scroll when the keyboard hides. |\n| `enableAutoAutomaticScroll` | `boolean` | When focus in `TextInput` will scroll the position, default is enabled. |\n| `extraHeight` | `number` | Adds an extra offset when focusing the `TextInput`s. |\n| `extraScrollHeight` | `number` | Adds an extra offset to the keyboard. Useful if you want to stick elements above the keyboard. |\n| `enableResetScrollToCoords` | `boolean` | Lets the user enable or disable automatic resetScrollToCoords. |\n| `keyboardOpeningTime` | `number` | Sets the delay time before scrolling to new position, default is 250 |\n| `enableOnAndroid` | `boolean` | Enable Android Support |\n\n### Methods\nUse `innerRef` to get the component reference and use `this.scrollRef.props` to access these methods.\n\n| **Method** | **Parameter** | **Description** |\n|------------|---------------|-----------------|\n| `getScrollResponder` | `void` | Get `ScrollResponder` |\n| `scrollToPosition` | `x: number, y: number, animated: bool = true` | Scroll to specific position with or without animation. |\n| `scrollToEnd` | `animated?: bool = true` | Scroll to end with or without animation. |\n\n### Using high order component\nEnabling any component to be keyboard-aware is very easy. Take a look at the code of `KeyboardAwareListView`:\n\n```js\n/* @flow */\n\nimport { ListView } from 'react-native'\nimport listenToKeyboardEvents from './KeyboardAwareHOC'\n\nexport default listenToKeyboardEvents(ListView)\n```\n\n## License\n\nMIT.\n\n## Author\n\n√Ålvaro Medina Ballester `<amedina at apsl.net>`\n\nBuilt with üíõ by [APSL](https://github.com/apsl).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/APSL/react-native-keyboard-aware-scroll-view.git"
  },
  "scripts": {
    "flow": "flow check",
    "lint": "eslint lib",
    "test": "npm run lint"
  },
  "tags": [
    "react",
    "react-native",
    "react-component",
    "ios",
    "android"
  ],
  "types": "index.d.ts",
  "version": "0.4.2"
}
